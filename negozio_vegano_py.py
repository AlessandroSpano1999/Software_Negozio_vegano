# -*- coding: utf-8 -*-
"""Negozio_vegano.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WjbNWQcq5-otkE3wHQFzHlXgtJK8xOt2
"""

# Ho deciso di creare due files 'products.csv' e 'sales.csv'per monitorare il contenuto dei file e per semplificare il codice nella conta dei profitti.
# Nella situazione in cui nella sessione di vendita il file si svuotasse inconsciamente o si digitasse erroneamente un numero o nome sbagliato, ho concesso
# la possibilit√† di cancellare la vendita effetuata alla fine della vendita, ripristinando i file con una funzione di buckup e ripristino del file originale.

import csv
import os
class VeganStore:
  def __init__(self,command):
    self.command = command
    self.create_files()
  def commands(self):
    """
    Gestisce i comandi inseriti dall'utente e chiama i metodi corrispondenti.
    """
    try:
      assert self.command.lower() in ['aggiungi', 'elenca', 'vendita', 'profitti', 'aiuto', 'chiudi'], \
          "Comando non valido.\n" \
          "I comandi disponibili sono:\n" \
          "- aggiungi: aggiungi un prodotto al magazzino\n" \
          "- elenca: elenca i prodotti in magazzino\n" \
          "- vendita: registra una vendita effettuata\n" \
          "- profitti: mostra i profitti totali\n" \
          "- aiuto: mostra i possibili comandi\n" \
          "- chiudi: esci dal programma."

      if self.command.lower()=='aggiungi':
        self.add()

      elif self.command.lower()=='elenca':
        self.products()

      elif self.command.lower()=='vendita':
        self.sale()

      elif self.command.lower()=='profitti':
        self.profits()

      elif self.command.lower()=='aiuto':
        self.help()

      elif self.command.lower()=='chiudi':
        self.closed()
    except AssertionError as e:
      print(f"Errore: {e}")

  def create_files(self):
    """
    Crea i file 'products.csv' e 'sales.csv' se non esistono gi√†
    """
    if not os.path.exists('products.csv'):
        with open('products.csv', mode='w', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=['Nome', 'Quantit√†', 'Prezzo', 'Prezzo_acquisto'])
            writer.writeheader()
    if not os.path.exists('sales.csv'):
        with open('sales.csv', mode='w', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=['Nome', 'Quantit√†', 'Prezzo', 'Prezzo_acquisto'])
            writer.writeheader()

  def check_name(self):
      """
      Controlla se il nome del prodotto esiste nel magazzino
      """
      product_name = input("Nome del prodotto: ")
      with open('products.csv', mode='r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            if row['Nome'] == product_name:
              return True, product_name
      return False, product_name

  def add(self):
    """
    Aggiunge un prodotto al magazzino
    """
    try:
      result, product_name = self.check_name()
      product_quantity = int(input("Quantit√†: "))
      if result:
          rows = []
          with open('products.csv', mode='r') as file:
              reader = csv.DictReader(file)
              for row in reader:
                  if row['Nome'] == product_name:
                      row['Quantit√†'] = int(row['Quantit√†']) + product_quantity
                  rows.append(row)
          with open('products.csv', mode='w', newline='') as file:
              writer = csv.DictWriter(file, fieldnames=['Nome', 'Quantit√†', 'Prezzo', 'Prezzo_acquisto'])
              writer.writeheader()
              writer.writerows(rows)
      else:
          product_cost = float(input("Prezzo di acquisto: "))
          product_sale = float(input("Prezzo di vendita: "))
          assert product_cost < product_sale, 'Il costo di acquisto non pu√≤ essere maggiore al prezzo di vendita'
          with open('products.csv', mode='a', newline='') as file:
              writer = csv.DictWriter(file, fieldnames=['Nome', 'Quantit√†', 'Prezzo', 'Prezzo_acquisto'])
              writer.writerow({
                  'Nome': product_name,
                  'Quantit√†': product_quantity,
                  'Prezzo': product_sale,
                  'Prezzo_acquisto': product_cost
              })
      print(f'AGGIUNTO: {product_quantity}X {product_name}')
    except ValueError:
        print("Errore: Assicurati di inserire un numero valido.")
    except AssertionError as e:
        print(f"Errore: {e}")

  def products(self):
    """
    Elenca i prodotti disponibili nel magazzino
    """
    with open('products.csv','r', newline='') as csv_file:
        csv_reader = csv.DictReader(csv_file)
        print("%s\t%s\t%s" % tuple(csv_reader.fieldnames[:3]))
        for row in csv_reader:
            print("%s\t%s\t\t‚Ç¨%s" % (row['Nome'], row["Quantit√†"], row["Prezzo"]))

  def backup_files(self):
    """
    Esegue il backup dei file products.csv e sales.csv
    """
    with open('products.csv', mode='r') as file:
        self.products_content = file.readlines()
    with open('sales.csv', mode='r') as file:
        self.sales_content = file.readlines()

  def restore_files(self):
    """
    Ripristina i file products.csv e sales.csv dai backup
    """
    with open('products.csv', mode='w', newline='') as file:
        file.writelines(self.products_content)
    with open('sales.csv', mode='w', newline='') as file:
        file.writelines(self.sales_content)

  def sale(self):
    """
    Gestisce il processo di vendita dei prodotti
    """
    continue_loop = True
    self.backup_files()
    sales_list = []
    while continue_loop:
      try:
        result, product_name = self.check_name()
        if result:
          product_quantity = int(input("Quantit√†: "))
          rows = []
          with open('products.csv', mode='r') as file:
              reader = csv.DictReader(file)
              for row in reader:
                  if row['Nome'] == product_name:
                      row['Quantit√†'] = int(row['Quantit√†']) - product_quantity
                      product_sale = float(row['Prezzo'])
                      product_cost = float(row['Prezzo_acquisto'])
                      assert row['Quantit√†']>=0,'Le quantit√† vendute sono maggiori di quelle presenti'
                      if row['Quantit√†']==0:
                        continue
                  rows.append(row)
          with open('products.csv', mode='w', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=['Nome', 'Quantit√†', 'Prezzo', 'Prezzo_acquisto'])
            writer.writeheader()
            writer.writerows(rows)
          with open('sales.csv', mode='a', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=['Nome', 'Quantit√†', 'Prezzo', 'Prezzo_acquisto'])
            writer.writerow({
                'Nome': product_name,
                'Quantit√†': product_quantity,
                'Prezzo': product_sale,
                'Prezzo_acquisto': product_cost
            })
          sales_list.append([product_name,product_quantity,product_sale])

        else:
          if os.path.getsize('products.csv') == 39:
            continue_loop = False
            print("Il file √® vuoto.")
          else:
            print("Errore :Il prodotto digitato non esiste nell'elenco")

      except ValueError:
          print("Errore: Assicurati di inserire un numero valido.")
      except AssertionError as e:
          print(f"Errore: {e}")

      while continue_loop:
        digit = input("Aggiungere un altro prodotto? (si/no): ")
        if digit.lower() == 'si':
            break
        elif digit.lower() == 'no':
            continue_loop = False
        else:
            print("Risposta non valida. Per favore, inserisci 'si' o 'no'")

    save = input("Vuoi salvare la vendita?inserisci 'si' o premi un altro tasto : ")
    if save.lower()=='si':
      print('VENDITA REGISTRATA')
      sum = 0
      for product in sales_list:
        sum+=(product[1]*product[2])
        print(f'-{product[1]}X {product[0]} : ‚Ç¨{product[2]}')
      print(f"Totale : ‚Ç¨{sum}")

    else:
      print('La vendita non √® stata registrata')
      self.restore_files()

  def profits(self):
    total_sale = 0
    total_cost = 0
    try:
      with open('sales.csv','r') as csv_file:
          csv_reader = csv.DictReader(csv_file)
          for row in csv_reader:
              total_cost += float(row['Prezzo_acquisto'])*int(row['Quantit√†'])
              total_sale += float(row['Prezzo'])*int(row['Quantit√†'])
      net_balance = total_sale - total_cost
      print(f'Profitto lordo = ‚Ç¨{round(total_sale,2)}\nProfitto netto = ‚Ç¨{round(net_balance,2)}')
    except StopIteration:
        net_balance = total_sale - total_cost
        print(f'Profitto lordo: ‚Ç¨{round(total_sale,2)}\nProfitto netto : ‚Ç¨{round(total_sale,2)}')


  def help(self):
    print("I comandi disponibili sono i seguenti:\n"
          "-aggiungi: aggiungi un prodotto al magazzino\n"
          "-elenca: elenca i prodotto in magazzino\n"
          "-vendita: registra una vendita effettuata\n"
          "-profitti: mostra i profitti totali\n"
          "-aiuto: mostra i possibili comandi\n"
          "-chiudi: esci dal programma\n")

  def closed(self):
    print("Goodbye!!üëã")

while True :
  digit = input('\nInserisci un comando:\n - aggiungi\n - elenca\n - vendita\n - profitti\n - aiuto\n - chiudi\n')
  vegan_store = VeganStore(digit)
  vegan_store.commands()
  if digit.lower() == 'chiudi':
      break